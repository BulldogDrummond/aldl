{"name":"Aldl-io","tagline":"Make use of ALDL datastreams in gnu/linux","body":"## overview\r\n\r\nthis is a program designed to manage aldl datastreams from the 8192 baud series\r\nof OBD-I GM ECMs under gnu/linux based operating systems, but specifically EE\r\nmask LT1 ecms.\r\n\r\ni started this project in an attempt to make a raspberry pi powered dashboard\r\nfor my LT1 based car.\r\n\r\n## goals\r\n\r\n* adaptable to any ecm that adheres to the standard 8192 baud aldl protocol\r\n* low cpu use for low power devices such as raspberry pi and netbooks\r\n* easy configuration that's easily adapted from other formats\r\n* portable to at least ARM and x86\r\n* highest throughput possible but with adjustable throttling\r\n* highest connection stability and reconnect rate possible\r\n* transparent and stupid simple api\r\n* very easy to make plugins thread-safe\r\n* fast and easy automatic datalogging to csv format\r\n* simple ncurses interface for raspberry pi based dashboard\r\n\r\n## instructions\r\n\r\nto build and run it, you'll need to:\r\n\r\ninstall libftdi and libncurses.\r\n\r\nif you run debian/ubuntu/whatever, then: apt-get install ncurses-dev libftdi-dev\r\n\r\nrmmod ftdi_sio.  this removes the the in-kernel ftdi driver, this one uses raw usb and wont work while the kernel driver is loaded.  most people should just blacklist this driver, and make sure your user has permissions to read/write usb devices.\r\n\r\nthe config files are in examples/ and it's built to use this directory by default for testing.\r\n\r\nthe only thing you should have to change is identifying your ftdi device somehow in examples/aldl.conf\r\n\r\nthere are instructions at the bottom of this file on various ways to do that.  but briefly, if you run lsusb, and you find your device, it'll be like:\r\n\r\nBus 001 Device 003: ID 0424:ec00 Some FTDI Device\r\n\r\nthere is also a command, ./aldl-ftdi devices  which may give you more detailed information about the ftdi devices on your system, or may not.  i haven't tested it.\r\n\r\nthen look in examples/aldl.conf.  there's a PORT=\"d:bus/device\" line.  for this example, PORT=\"D:001/003\" would work\r\n\r\nthen:\r\n\r\n./aldl-ftdi\r\n\r\nand you're good to go.  go ahead and run it before you start your car, it'll auto-connect when your car is powered up.\r\n\r\nby default, it only runs the ncurses display interface.  the default modules that run are also specified in aldl.conf.\r\n\r\nif you want datalogging to run, you can just ./aldl-ftdi datalogger will run the datalogger too.  it logs to /tmp by default.\r\n\r\nlook at all the config files if you want to try anything out, they're pretty straightforward\r\n\r\n## contents\r\n\r\nmain.c: sets up initial structures and spawns some threads, to get things going\r\n        facilitates loading of modules and main config data, etc.\r\n\r\nacquire.c: an object that runs an event loop full of functions from aldl-io,\r\n           maintaining connection state and constructing a linked list buffer\r\n           of parsed and verified aldl data.\r\n\r\nerror.c: a global error handling object.\r\n\r\naldl-io.h: all public functions are exported here.  this also explicitly\r\n           includes aldl-types.h.\r\n\r\naldl-types.h: defines all public data structures used in this library.\r\n\r\naldldata.c: provides functions for data management, including construction of\r\n            the linked list of records, parsing and conversion of raw data, and\r\n            thread-safe read/write of critical data.\r\n\r\naldlcomm.c: provides communication protocols for dealing with the ECM, including\r\n            sending and generating requests, retrieving raw packets of data,\r\n            and verifying them.\r\n\r\nuseful.c: generic useful functions that are used by many different objects.\r\n\r\nloadconfig.c: a stupid but useful configuration file routine that is bound to\r\n              the equals sign.  includes routines for parsing the main config\r\n              files directly, but has enough of an api to be used by modules.\r\n\r\nserio-ftdi.c: an object that allows serial communications using the libftdi\r\n              userland driver (via libusb).  this is the reccommended and only\r\n              currently supported interface.\r\n\r\nserio-dummy.c: a really stupid fake serial driver for debugging, that pretends\r\n               to be an LT1 ecm.  seriously, it's really stupid, doesn't even\r\n               check input, just spits out data in a serialized operation scope\r\n\r\nmodules/*: various output modules which can be executed by main.c to actually\r\n           do stuff with the data, incl. display and logging.\r\n\r\n## notes\r\n\r\nstring to identify your ftdi interface (pick one):\r\n   d:devicenode (usually at /proc/bus/usb)\r\n   i:vendor:product\r\n   i:vendor:product:index\r\n   s:vendor:product:serial\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}