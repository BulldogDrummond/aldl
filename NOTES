Configuration:

The configuration file format is based around '=', anything to the left of an
equals char = is considered a parameter name, and anything to the right is
considered the value.  The fields are terminated by whitespace OR linefeed,
with the exception of quoted strings, inside which whitespace is ignored.

This means fancy layout and comments are allowed, as long as they are NOT
adjacent to an equals sign.

Some parameters can be omitted, and default values will be put in place.

Access of Data:

- A linked list of aldl_record_t structures is constructed as fixed length
  buffer.

- No locking is required for reading data from the top of the buffer, the data
  will NEVER be modified once it is attached to the linked list.

- Data in a record always matches the array index of the definition set, as in
  conf->def[x] and record->data[x].  This can be leveraged to easily get data
  from a definition.

  This is an example of a stupid plugin that has some initial knowledge of the
  unique ID of the RPM definition, and displays RPM in a loop, it's thread-safe

- There is a statistical structure that requires locking, lock_stats() and
  unlock_stats() need to be called.

/*------------------------------------------------------------------------*/

void display_rpm(aldl_conf_t *aldl) {

  /* get the index and store it, to avoid repeated lookups */
  int rpmindex = get_index_by_name(aldl,"RPM");

  pause_until_buffered(aldl);

  aldl_record_t *rec = newest_record(aldl); /* ptr to the most current record */

  while(1) {
    /* pause until new data is available, then point to new record */
    rec = next_record_wait(rec);

    /* in that record, get data field rpmindex, and the floating point value
       contained within ... also get the short name from the definition. */
    printf("%s: %f\n",aldl->def[rpmindex].name, rec->data[rpmindex].f);
  };
};

/*------------------------------------------------------------------------*/

RULES FOR PLUGIN DEVELOPERS:

- Always call pause_until_connected before your intial data retrieval, this
  ensures the buffer is full enough, and the connection has happened.  after
  one call, the buffer will ALWAYS be full enough.

- Never access the linked list pointers directly, use the following functions:
  aldl_record_t *newest_record(aldl_conf_t *aldl);
  aldl_record_t *next_record_wait(aldl_record_t *rec);
  aldl_record_t *next_record(aldl_record_t *rec);
  these ensure thread safety on the structural components themselves...

- Never, under any circumstances, write directly to any data structure.

- Ending the program via a plugin should always be done by running:
  while(1) set_commstate(ALDL_QUIT);

- Speed is important when using next_record or next_record_wait, your routine
  must theoretically execute in average speed more quickly than:

  t = ( 0.122ms * number of bytes in all pkts * 1.2 )

  On an LT1 using 64 byte packets this allows approx. 10ms once calculation
  overhead is taken into account.  If your route is slower than this on average
  over the buffer size, you must use newest_record() to allow frame skipping,
  in which case your routine can take t * bufsize with no problems.

  Results are UNDEFINED BEHAVIOR if you try to retrieve data from the last
  record, no locking is done on deletion, as it is assumed any routine that
  operates so slowly is a display routine, that will want frame skipping
  anyway.

- All plugins must call pause_until_buffered(), just once, before ever using
  the data structures, otherwise data might not be there..
