there will be multiple aldl i/o methods, so far just these two:

tty serial i/o:
  * 'compatibility mode'
  * just opens a file descriptor to a tty, does some basic config for
    blocking and xon/xoff type shit, and uses it.
  * requires pre-configuration of baud rate, due to differences in kernel
    capabilities and userland tools.  setserial can usually do it with a
    divisor.  aldl uses such a weird baud rate, this makes using direct tty
    a real bitch

ftdilib:
  * this is a super-portable userspace ftdi chipset driver.  most usb aldl
    cables seem to use that chipset.
  * for the most common usb-serial adaptors, seems to be more powerful and
    can be configured with very specific baud rates, bit banging, advanced
    timing.  this should be the most commonly used.
  * to use it, the ftdi_sio driver must be blacklisted or it'll auto-load
    when the interface is plugged in, and ftdilib wont work.

string to identify your ftdi interface (pick one):
   d:devicenode (usually at /proc/bus/usb)
   i:vendor:product
   i:vendor:product:index
   s:vendor:product:serial

we should provide auto-detection, but it's not done yet.

these interfaces are compile-time selected.  object files for each method are
available with an identical api for each method.

Notes on Timing:
the 'timeout' field is imprecise, and is a garunteed minimum timeout only,
the time to actually deal with the driver and reiceve a packet is added to it.
i've added rough compensations so it's a bit more accurate.  this could use
more work, but portability in millisecond timestamps sucks, and the pi has a
very poor sense of time in general.

